{"version":3,"sources":["assets/sprites/warrior.png","core/constants.ts","core/util/Grid.ts","assets/terrain/savanna_dry_d.jpg","assets/terrain/savanna_dry_n.jpg","assets/terrain/ground_mud_d.jpg","assets/terrain/snow2_d.jpg","assets/terrain/snow2_n.jpg","assets/terrain/ground_mud_n.jpg","assets/terrain/brushwalker218.png","assets/elyvisions/arch3_bk.png","assets/elyvisions/arch3_dn.png","assets/elyvisions/arch3_ft.png","assets/elyvisions/arch3_lf.png","assets/elyvisions/arch3_rt.png","assets/elyvisions/arch3_up.png","core/util/MoveValidator.ts","core/util/enviroment.ts","core/util/Actor.ts","core/util/basescene.ts","components/Host.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SlotType","GridBitMasks","GridSize","Grid","size","validator","actors","notRandomized","premadeGrid","_grid","_noiseGen","_length","_width","_moveValidator","_actors","this","SimplexNoise","actor","x","getPosition","z","y","nx","ny","noise2D","row","col","i","j","_assignType","_generate","generatedNumber","spotType","MoveValidator","grid","Error","Enviroment","scene","canvas","maxCameraRadius","minCameraRadius","_scene","_height","_canvas","_maxRadius","_minRadius","_enviormentGrid","_addMesh","mesh","BABYLON","CreateBox","position","mat","getType","diffuseTexture","texture","bumpTexture","normalTexture","snowTexture","snowTextureNormal","mudTexture","mudTextureNormal","waterTexture","material","skybox","skyboxmat","backFaceCulling","reflectionTexture","skybox1","skybox2","skybox3","skybox4","skybox5","skybox6","diffuseColor","specularColor","init","_init","camera","Math","PI","Zero","_makeSkyBox","upperBetaLimit","lowerBetaLimit","lowerRadiusLimit","upperRadiusLimit","attachControl","Actor","actorAttributes","positon","currentSprite","pickable","animated","_currentSprite","_position","_sprite","_spriteManager","_actorAttributes","Vector3","SpriteManager","width","height","Sprite","playAnimation","isVisible","isPickable","console","log","newPosition","v","Driver","_engine","_lastpicked","_moves","Engine","Scene","onPointerObservable","add","info","type","POINTERDOWN","otherPicked","pick","pointerX","pointerY","pickedMesh","name","pickedSprite","set","dispose","picked","pickSprite","hit","displayValidMoves","floor","alpha","GUI","CreateFullscreenUI","agility","defense","vitiality","strength","dexterity","charisma","mana","speed","isAlive","pic","runRenderLoop","render","window","addEventListener","resize","Host","props","_canvasRef","React","createRef","a","show","id","ref","canvasRef","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf9c25f6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/warrior.64dc15a5.png\";","export  const SlotType = {\n    SAND: 1,\n    GRASS: 2,\n    MUD: 3,\n    SNOW:4 ,\n    WATER: 5,\n    GRAVEL: 6,\n    STONE: 7\n} as const\n\nexport const GridBitMasks = {\n    OCCUPIED: 0x1,\n    TYPE: 0x1fe,\n    HEIGHT: 0x1e00\n}as const;\n\n/**\n * Determines the grid size.\n */\nexport const GridSize = {\n    SMALL: 24,\n    MEDIUM: 32,\n    LARGE: 40\n} as const;\n\n/**\n * Determines the weapon type.\n */\nexport const WeaponType = {\n    STAFF: 1,\n    LONG_SWORD: 2,\n    SHORT_SWORD: 3,\n    BOW: 4,\n    POLEARM: 5,\n    KNUCKLES: 6,\n    ROD: 7,\n    DAGGER: 8,\n    WAND: 9\n} as const;\n\n/**\n * Determines the upperlimit of the damage the weapon can inflict.\n */\nexport const DamageClass ={\n    LOW: 1,\n    BELOW_AVG: 2,\n    AVG: 3,\n    ABOVE_AVG: 4,\n    HIGH: 5\n} as const;","import SimplexNoise from \"simplex-noise\";\nimport { IGrid } from \"./IGrid\";\nimport { GridBitMasks, GridSize, SlotType } from \"../constants\";\nimport IMoveValidator from \"./IMoveValidator\";\nimport IActor from \"./IActor\";\n\n/**\n * Manages grid attributes and units on the grid.\n */\nexport default class Grid implements IGrid {\n    private _grid: number[][];\n    private _noiseGen: SimplexNoise;\n    private _length: number;\n    private _width: number;\n    private _moveValidator: IMoveValidator;\n    private _actors: IActor[]\n\n\n    constructor(size: number,validator:IMoveValidator, actors?: IActor[], notRandomized?: boolean, premadeGrid?: number[][]) {\n        this._grid = [[]];\n        this._length = size;\n        this._width = size;\n        this._noiseGen = new SimplexNoise();\n        this._moveValidator = validator;\n        this._actors = actors?? [];\n    }\n   \n    updateGrid(actor: IActor, size: number): void {\n        let x = size/2 - actor.getPosition().x; \n        let z = size/2 - actor.getPosition().y;\n        \n        this._grid[x][z] = this._grid[x][z] | 1;\n    }\n\n    private _generate(nx: number, ny: number) {\n        return this._noiseGen.noise2D(nx, ny) / 2 + 0.5;\n    }\n\n    getGrid(): number[][] {\n        return this._grid;\n    }\n    getType(row: number, col: number): number {\n        return (this._grid[row][col] & GridBitMasks.TYPE) >> 1;\n    }\n    isOccupied(row: number, col: number): boolean {\n\n        return (this._grid[row][col] & GridBitMasks.OCCUPIED) === 1;\n    }\n    init(): void {\n\n        for (let i = 0; i < this._length; i++) {\n            this._grid[i] = []\n            for (let j = 0; j < this._width; j++) {\n                let nx = i / this._width - 0.5, ny = j / this._length - 0.5;\n\n                this._assignType(i, j, this._generate(nx, ny));\n\n            }\n        }\n    }\n\n    private _assignType(row: number, col: number, generatedNumber: number) {\n        let spotType: number = 0;\n        if (generatedNumber < 0.2) {\n            spotType = SlotType.GRASS;\n        } else if (generatedNumber < 0.3) {\n            spotType = SlotType.SNOW;\n        } else if (generatedNumber < 0.4) {\n            spotType = SlotType.MUD;\n        } else if (generatedNumber < 1.0) {\n            spotType = SlotType.WATER;\n        }\n\n        this._grid[row][col] = spotType << 1;\n    }\n    /**\n     * Returns the current grid.\n     */\n    get grid() {\n        return this._grid;\n    }\n\n    public isValidMove(row: number, col: number): boolean {\n        return true;\n    }\n\n\n\n\n\n}\n\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/savanna_dry_d.9bef9f29.jpg\";","export default __webpack_public_path__ + \"static/media/savanna_dry_n.7b994994.jpg\";","export default __webpack_public_path__ + \"static/media/ground_mud_d.c541fd50.jpg\";","export default __webpack_public_path__ + \"static/media/snow2_d.3ca6e495.jpg\";","export default __webpack_public_path__ + \"static/media/snow2_n.772c4e7f.jpg\";","export default __webpack_public_path__ + \"static/media/ground_mud_n.27ffb444.jpg\";","export default __webpack_public_path__ + \"static/media/brushwalker218.86327b2f.png\";","export default __webpack_public_path__ + \"static/media/arch3_bk.8f8ab086.png\";","export default __webpack_public_path__ + \"static/media/arch3_dn.f8f7fec7.png\";","export default __webpack_public_path__ + \"static/media/arch3_ft.05141b55.png\";","export default __webpack_public_path__ + \"static/media/arch3_lf.12f9f372.png\";","export default __webpack_public_path__ + \"static/media/arch3_rt.c83185a2.png\";","export default __webpack_public_path__ + \"static/media/arch3_up.cf10ede6.png\";","import IActor from \"./IActor\";\nimport { IGrid } from \"./IGrid\";\nimport IMoveValidator from \"./IMoveValidator\";\n\n\nexport class MoveValidator implements IMoveValidator {\n    validateMove(grid: IGrid, actor: IActor): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n","import * as BABYLON from '@babylonjs/core';\n\nimport Grid from './Grid';\nimport { IGrid } from \"./IGrid\";\nimport texture from '../../assets/terrain/savanna_dry_d.jpg';\nimport normalTexture from '../../assets/terrain/savanna_dry_n.jpg';\nimport mudTexture from '../../assets/terrain/ground_mud_d.jpg';\nimport snowTexture from '../../assets/terrain/snow2_d.jpg';\nimport snowTextureNormal from '../../assets/terrain/snow2_n.jpg';\nimport mudTextureNormal from '../../assets/terrain/ground_mud_n.jpg';\nimport waterTexture from '../../assets/terrain/brushwalker218.png';\nimport { IEnviroment } from './IEnviroment';\n\n//skybox\nimport skybox1 from '../../assets/elyvisions/arch3_bk.png';\nimport skybox2 from '../../assets/elyvisions/arch3_dn.png';\nimport skybox3 from '../../assets/elyvisions/arch3_ft.png';\nimport skybox4 from '../../assets/elyvisions/arch3_lf.png';\nimport skybox5 from '../../assets/elyvisions/arch3_rt.png';\nimport skybox6 from '../../assets/elyvisions/arch3_up.png';\nimport { SlotType } from '../constants';\nimport { MoveValidator } from \"./MoveValidator\";\n\n\n/**\n * Creates an enviroment with a skybox and Grid.\n */\nexport class Enviroment implements IEnviroment {\n    private _scene: BABYLON.Scene;\n\n    private _height: number;\n    private _width: number;\n\n    private _canvas: any;\n    private _maxRadius: number;\n    private _minRadius: number;\n    private _enviormentGrid: IGrid;\n\n\n    constructor(scene: BABYLON.Scene, canvas: any, size: number, maxCameraRadius?: number, minCameraRadius?: number) {\n        this._scene = scene;\n\n        this._height = size;\n        this._width = size;\n        this._canvas = canvas;\n        this._maxRadius = maxCameraRadius ?? 40;\n        this._minRadius = minCameraRadius ?? 10;\n        this._enviormentGrid = new Grid(size,new MoveValidator());\n\n\n    }\n\n\n    //move to grid\n    private _init() {\n        for (let i = 0; i < this._height; i++) {\n            for (let j = 0; j < this._width; j++) {\n                this._addMesh(i, j, 0);\n            }\n        }\n    }\n\n\n    private _addMesh(x: number, y: number, z: number) {\n        let mesh = BABYLON.MeshBuilder.CreateBox(\"box\" + x + \" : \" + y, { size: 1 }, this._scene);\n        mesh.position =\n            new BABYLON.Vector3(-1 * ((this._width / 2) - x), 0, -1 * ((this._height / 2) - y));\n\n        let mat = new BABYLON.StandardMaterial(\"texture\", this._scene);\n\n        if (this._enviormentGrid.getType(x, y) === SlotType.GRASS) {\n            mat.diffuseTexture = new BABYLON.Texture(texture, this._scene);\n            mat.bumpTexture = new BABYLON.Texture(normalTexture, this._scene);\n        } else if (this._enviormentGrid.getType(x, y) === SlotType.SNOW) {\n            mat.diffuseTexture = new BABYLON.Texture(snowTexture, this._scene);\n            mat.bumpTexture = new BABYLON.Texture(snowTextureNormal, this._scene);\n        } else if (this._enviormentGrid.getType(x, y) === SlotType.MUD) {\n            mat.diffuseTexture = new BABYLON.Texture(mudTexture, this._scene);\n            mat.bumpTexture = new BABYLON.Texture(mudTextureNormal, this._scene);\n        } else if (this._enviormentGrid.getType(x, y) === SlotType.WATER) {\n            mat.diffuseTexture = new BABYLON.Texture(waterTexture, this._scene);\n            //mat.bumpTexture = new BABYLON.Texture(snowTextureNormal, this._scene);\n        }\n\n        mesh.material = mat;\n    }\n\n    private _makeSkyBox(scene: BABYLON.Scene): void {\n        var skybox = BABYLON.MeshBuilder.CreateBox('skybox', { size: 100 }, this._scene);\n        var skyboxmat = new BABYLON.StandardMaterial('skybox', this._scene);\n        skyboxmat.backFaceCulling = false;\n        skyboxmat.reflectionTexture = new BABYLON.CubeTexture('', this._scene, ['_bk.png', '_dn.png', '_ft.png', '_lf.png', '_rt.png', '_up.png'], false, [skybox1, skybox2, skybox3, skybox4, skybox5, skybox6]);\n        skyboxmat.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxmat.specularColor = new BABYLON.Color3(0, 0, 0);\n        skybox.material = skyboxmat;\n        \n\n    }\n\n    public init() {\n\n        this._enviormentGrid.init();\n        this._init();\n        var camera =\n            new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, BABYLON.Vector3.Zero(), this._scene);\n\n        const light = new BABYLON.HemisphericLight(\"Light1\", new BABYLON.Vector3(1, 1, 0), this._scene);\n        this._makeSkyBox(this._scene);\n\n        camera.upperBetaLimit = Math.PI / 2.2;\n        camera.lowerBetaLimit = 0;\n        camera.lowerRadiusLimit = this._minRadius;\n        camera.upperRadiusLimit = this._maxRadius;\n\n\n        camera.attachControl(this._canvas, true);\n    }\n}\n\n","import {  Vector3, Sprite, SpriteManager,Scene } from '@babylonjs/core';\nimport IActor from '../util/IActor';\nimport { Coordinate } from './Coordinate';\nimport { IActorAttributes } from './IActorAttributes';\n\nexport default class Actor implements IActor{\n    //#region fields\n \n    private _currentSprite: string;\n    private _position: Vector3;\n    private _sprite: Sprite;\n    private _spriteManager: SpriteManager;\n    private _scene: Scene;\n    private _actorAttributes: IActorAttributes;\n\n\n   \n    \n    \n    //#endregion\n    constructor(actorAttributes: IActorAttributes, positon: Coordinate, currentSprite: string, scene:Scene ,pickable?:boolean, animated?: boolean){\n        this._scene = scene;\n        this._actorAttributes = actorAttributes;\n        this._position = new Vector3(positon.x, positon.y, positon.z);\n        this._currentSprite = currentSprite;\n        this._spriteManager = new SpriteManager(\"sprite1\", this._currentSprite, 1,{ width: 32, height: 32 }, this._scene);\n        this._sprite = new Sprite(\"sprite\", this._spriteManager);\n        this._sprite.position = this._position;\n        \n        if(animated){\n            this._sprite.playAnimation(21,30,true, 120);\n            this._sprite.isVisible = true;\n            \n        }\n\n        if(pickable){\n            this._sprite.isPickable = pickable;\n            this._spriteManager.isPickable = pickable;\n        }\n        console.log(this._position);\n    }\n    getPosition(): Vector3 {\n        return  this._position;\n    }\n    move(newPosition: Vector3): void {\n        this._position = newPosition;\n        console.log(this._position);\n    }\n    //#region props\n   \n  \n   public get actorAttributes() : IActorAttributes {\n       return this._actorAttributes;\n   }\n   public set actorAttributes(v : IActorAttributes) {\n       this._actorAttributes = v;\n   }\n\n  \n    //#endregion\n\n\n}\n\n","import { Engine, PickingInfo, PointerInfo, Scene, Vector3 } from '@babylonjs/core';\nimport * as GUI from 'babylonjs-gui';\nimport * as BABYLON from '@babylonjs/core';\nimport pic from '../../assets/sprites/warrior.png';\nimport pic2 from '../../assets/sprites/rogue.png';\nimport pic3 from '../../assets/sprites/cleric.png';\n\nimport { Enviroment } from './enviroment';\nimport { IEnviroment } from './IEnviroment';\nimport { GridSize } from '../constants';\nimport IActor from './IActor';\nimport Actor from './Actor';\n\n\n\n\n\n\nexport class Driver {\n    private _scene: Scene;\n    private _engine: Engine;\n    private _canvas: any;\n    private _lastpicked: any;\n    private _moves: BABYLON.Mesh[][];\n    //private actor: IActor;\n\n\n    constructor(canvas: any) {\n        this._canvas = canvas;\n        this._engine = new Engine(canvas);\n        this._scene = new Scene(this._engine);\n        this._moves = [];\n        //this.actor = new Actor({agility: 3, defense: 3, vitiality: 3, strength: 3, dexterity: 3, charisma: 3, mana: 3, speed: 3, isAlive: true}, new Vector3(2,2,1), pic,this._scene, true, true);\n        this._scene.onPointerObservable.add((info: PointerInfo) => {\n          \n            if (info.type === BABYLON.PointerEventTypes.POINTERDOWN) {\n                let otherPicked = this._scene.pick(this._scene.pointerX, this._scene.pointerY);\n\n                if (otherPicked?.pickedMesh?.name === 'mesh') {\n                    \n                    console.log(otherPicked?.pickedMesh.position);\n                    this._lastpicked.pickedSprite.position.set(otherPicked.pickedMesh.position.x, otherPicked.pickedMesh.position.y, otherPicked.pickedMesh.position.z);\n                    for(let i = 0; i < 5; i++){\n                        for (let j = 0; j < 5; j++){\n                            this._moves[i][j].dispose();\n                        }\n                    }\n                    console.log(\"removing move meshes\");\n                    return;\n                }\n                let picked = this._scene.pickSprite(this._scene.pointerX, this._scene.pointerY);\n                if (picked != null && picked.hit) {\n                    if (picked.pickedSprite != null) {\n                     \n                        this._lastpicked = picked;\n                        this.displayValidMoves(picked);\n\n\n                    }\n                }\n            }\n\n        })\n    }\n\n    private displayValidMoves(pickedSprite: PickingInfo): void {\n        if (pickedSprite.pickedSprite != null) {\n\n\n            for (let i = 0; i < 5; i++) {\n                this._moves[i] = [];\n                for (let j = 0; j < 5; j++) {\n                    let mesh = BABYLON.MeshBuilder.CreateBox(\"mesh\", { size: 1 }, this._scene);\n                    mesh.position = new Vector3(-1 * (Math.floor((5 / 2)) - pickedSprite.pickedSprite.position.x) + i, 1, -1 * (Math.floor((5 / 2)) - pickedSprite.pickedSprite.position.z)+j);\n                    mesh.isPickable = true;\n                    let mat = new BABYLON.StandardMaterial(\"mats\", this._scene);\n                    mat.alpha = 0.5;\n                    mat.diffuseColor = new BABYLON.Color3(0, 0, 255);\n\n                    mesh.material = mat;\n                    this._moves[i][j] = mesh;\n                }\n            }\n            /*\n             get valid moves \n            */\n\n        }\n    }\n\n    show() {\n\n\n\n        let enviro: IEnviroment = new Enviroment(this._scene, this._canvas, GridSize.LARGE);\n        enviro.init();\n        let testGUI = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"myUI\", true, this._scene);\n        // let button =  GUI.Button.CreateSimpleButton(\"mybutton\", \"button\");\n        // button.width = 0.15;\n        // button.height = 0.15;\n        // button.cornerRadius = 9;\n        // button.background = \"blue\";\n        // button.topInPixels = -200;\n        // testGUI.addControl(button);\n        let actor: IActor = new Actor({agility: 3, defense: 3, vitiality: 3, strength: 3, dexterity: 3, charisma: 3, mana: 3, speed: 3, isAlive: true}, {x:3, y: 1, z: 0}, pic,this._scene, true, true);\n        let actor2: IActor = new Actor({agility: 3, defense: 3, vitiality: 3, strength: 3, dexterity: 3, charisma: 3, mana: 3, speed: 3, isAlive: true}, {x:4, y: 1, z: 0}, pic,this._scene, true, true);\n        \n\n\n     \n\n\n       \n\n        this._engine.runRenderLoop(() => {\n            this._scene.render();\n\n            \n\n        });\n\n        window.addEventListener('resize', () => {\n            this._engine.resize();\n            console.log(\"window resized\")\n        });\n\n    }\n}\n\n\n","import React from 'react';\nimport '../components/Host.css';\nimport { Driver } from '../core/util/basescene';\n\nexport default class Host extends React.Component<{}, {}>{\n\n    private _canvasRef: any;\n    \n\n    constructor(props: any) {\n        super(props);\n        this._canvasRef = React.createRef();\n    }\n\n    async componentDidMount() {\n\n        let d: Driver = new Driver(this._canvasRef);\n        d.show();\n\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <canvas id=\"game-host\" ref={canvasRef => { this._canvasRef = canvasRef }} >\n                </canvas>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Host from './components/Host';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Host></Host>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}