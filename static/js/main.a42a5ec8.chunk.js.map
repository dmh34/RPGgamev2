{"version":3,"sources":["assets/sprites/warrior.png","core/constants.ts","core/util/Grid.ts","assets/terrain/savanna_dry_d.jpg","assets/terrain/savanna_dry_n.jpg","assets/terrain/ground_mud_d.jpg","assets/terrain/snow2_d.jpg","assets/terrain/snow2_n.jpg","assets/terrain/ground_mud_n.jpg","assets/terrain/brushwalker218.png","assets/elyvisions/arch3_bk.png","assets/elyvisions/arch3_dn.png","assets/elyvisions/arch3_ft.png","assets/elyvisions/arch3_lf.png","assets/elyvisions/arch3_rt.png","assets/elyvisions/arch3_up.png","core/util/MoveValidator.ts","core/util/enviroment.ts","core/util/basescene.ts","components/Host.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SlotType","GridBitMasks","GridSize","Grid","size","validator","actors","notRandomized","premadeGrid","_grid","_noiseGen","_length","_width","_moveValidator","_actors","this","SimplexNoise","actor","nx","ny","noise2D","row","col","i","j","_assignType","_generate","generatedNumber","spotType","MoveValidator","grid","Error","Enviroment","scene","canvas","maxCameraRadius","minCameraRadius","_scene","_height","_canvas","_maxRadius","_minRadius","_enviormentGrid","_addMesh","x","y","z","mesh","BABYLON","CreateBox","position","mat","getType","diffuseTexture","texture","bumpTexture","normalTexture","snowTexture","snowTextureNormal","mudTexture","mudTextureNormal","waterTexture","material","skybox","skyboxmat","backFaceCulling","reflectionTexture","skybox1","skybox2","skybox3","skybox4","skybox5","skybox6","diffuseColor","specularColor","init","_init","camera","Math","PI","Zero","_makeSkyBox","upperBetaLimit","lowerBetaLimit","lowerRadiusLimit","upperRadiusLimit","attachControl","Driver","_engine","_cancas","_lastpicked","_moves","Engine","Scene","onPointerObservable","add","info","type","POINTERDOWN","otherPicked","pick","pointerX","pointerY","pickedMesh","name","console","log","pickedSprite","set","dispose","picked","pickSprite","hit","displayValidMoves","Vector3","floor","isPickable","alpha","GUI","CreateFullscreenUI","sprite","pic","width","height","p","playAnimation","runRenderLoop","render","window","addEventListener","resize","Host","props","_canvasRef","React","createRef","a","show","id","ref","canvasRef","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a42a5ec8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/warrior.64dc15a5.png\";","export  const SlotType = {\n    SAND: 1,\n    GRASS: 2,\n    MUD: 3,\n    SNOW:4 ,\n    WATER: 5,\n    GRAVEL: 6,\n    STONE: 7\n} as const\n\nexport const GridBitMasks = {\n    OCCUPIED: 0x1,\n    TYPE: 0x1fe,\n    HEIGHT: 0x1e00\n}as const;\n\n/**\n * Determines the grid size.\n */\nexport const GridSize = {\n    SMALL: 24,\n    MEDIUM: 32,\n    LARGE: 40\n} as const;\n\n/**\n * Determines the weapon type.\n */\nexport const WeaponType = {\n    STAFF: 1,\n    LONG_SWORD: 2,\n    SHORT_SWORD: 3,\n    BOW: 4,\n    POLEARM: 5,\n    KNUCKLES: 6,\n    ROD: 7,\n    DAGGER: 8,\n    WAND: 9\n} as const;\n\n/**\n * Determines the upperlimit of the damage the weapon can inflict.\n */\nexport const DamageClass ={\n    LOW: 1,\n    BELOW_AVG: 2,\n    AVG: 3,\n    ABOVE_AVG: 4,\n    HIGH: 5\n} as const;","import SimplexNoise from \"simplex-noise\";\nimport { IGrid } from \"./IGrid\";\nimport { GridBitMasks, SlotType } from \"../constants\";\nimport IMoveValidator from \"./IMoveValidator\";\nimport IActor from \"./IActor\";\n\n/**\n * Manages grid attributes and units on the grid.\n */\nexport default class Grid implements IGrid {\n    private _grid: number[][];\n    private _noiseGen: SimplexNoise;\n    private _length: number;\n    private _width: number;\n    private _moveValidator: IMoveValidator;\n    private _actors: IActor[]\n\n\n    constructor(size: number,validator:IMoveValidator, actors?: IActor[], notRandomized?: boolean, premadeGrid?: number[][]) {\n        this._grid = [[]];\n        this._length = size;\n        this._width = size;\n        this._noiseGen = new SimplexNoise();\n        this._moveValidator = validator;\n        this._actors = actors?? [];\n    }\n\n    updateGrid(actor: IActor, ): void {\n        \n    }\n\n    private _generate(nx: number, ny: number) {\n        return this._noiseGen.noise2D(nx, ny) / 2 + 0.5;\n    }\n\n    getGrid(): number[][] {\n        return this._grid;\n    }\n    getType(row: number, col: number): number {\n        return (this._grid[row][col] & GridBitMasks.TYPE) >> 1;\n    }\n    isOccupied(row: number, col: number): boolean {\n\n        return (this._grid[row][col] & GridBitMasks.OCCUPIED) === 1;\n    }\n    init(): void {\n\n        for (let i = 0; i < this._length; i++) {\n            this._grid[i] = []\n            for (let j = 0; j < this._width; j++) {\n                let nx = i / this._width - 0.5, ny = j / this._length - 0.5;\n\n                this._assignType(i, j, this._generate(nx, ny));\n\n            }\n        }\n    }\n\n    private _assignType(row: number, col: number, generatedNumber: number) {\n        let spotType: number = 0;\n        if (generatedNumber < 0.2) {\n            spotType = SlotType.GRASS;\n        } else if (generatedNumber < 0.3) {\n            spotType = SlotType.SNOW;\n        } else if (generatedNumber < 0.4) {\n            spotType = SlotType.MUD;\n        } else if (generatedNumber < 1.0) {\n            spotType = SlotType.WATER;\n        }\n\n        this._grid[row][col] = spotType << 1;\n    }\n    /**\n     * Returns the current grid.\n     */\n    get grid() {\n        return this._grid;\n    }\n\n    public isValidMove(row: number, col: number): boolean {\n        return true;\n    }\n\n\n\n\n\n}\n\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/savanna_dry_d.9bef9f29.jpg\";","export default __webpack_public_path__ + \"static/media/savanna_dry_n.7b994994.jpg\";","export default __webpack_public_path__ + \"static/media/ground_mud_d.c541fd50.jpg\";","export default __webpack_public_path__ + \"static/media/snow2_d.3ca6e495.jpg\";","export default __webpack_public_path__ + \"static/media/snow2_n.772c4e7f.jpg\";","export default __webpack_public_path__ + \"static/media/ground_mud_n.27ffb444.jpg\";","export default __webpack_public_path__ + \"static/media/brushwalker218.86327b2f.png\";","export default __webpack_public_path__ + \"static/media/arch3_bk.8f8ab086.png\";","export default __webpack_public_path__ + \"static/media/arch3_dn.f8f7fec7.png\";","export default __webpack_public_path__ + \"static/media/arch3_ft.05141b55.png\";","export default __webpack_public_path__ + \"static/media/arch3_lf.12f9f372.png\";","export default __webpack_public_path__ + \"static/media/arch3_rt.c83185a2.png\";","export default __webpack_public_path__ + \"static/media/arch3_up.cf10ede6.png\";","import IActor from \"./IActor\";\nimport { IGrid } from \"./IGrid\";\nimport IMoveValidator from \"./IMoveValidator\";\n\n\nexport class MoveValidator implements IMoveValidator {\n    validateMove(grid: IGrid, actor: IActor): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n","import * as BABYLON from '@babylonjs/core';\n\nimport Grid from './Grid';\nimport { IGrid } from \"./IGrid\";\nimport texture from '../../assets/terrain/savanna_dry_d.jpg';\nimport normalTexture from '../../assets/terrain/savanna_dry_n.jpg';\nimport mudTexture from '../../assets/terrain/ground_mud_d.jpg';\nimport snowTexture from '../../assets/terrain/snow2_d.jpg';\nimport snowTextureNormal from '../../assets/terrain/snow2_n.jpg';\nimport mudTextureNormal from '../../assets/terrain/ground_mud_n.jpg';\nimport waterTexture from '../../assets/terrain/brushwalker218.png';\nimport { IEnviroment } from './IEnviroment';\n\n//skybox\nimport skybox1 from '../../assets/elyvisions/arch3_bk.png';\nimport skybox2 from '../../assets/elyvisions/arch3_dn.png';\nimport skybox3 from '../../assets/elyvisions/arch3_ft.png';\nimport skybox4 from '../../assets/elyvisions/arch3_lf.png';\nimport skybox5 from '../../assets/elyvisions/arch3_rt.png';\nimport skybox6 from '../../assets/elyvisions/arch3_up.png';\nimport { SlotType } from '../constants';\nimport { MoveValidator } from \"./MoveValidator\";\n\n\n/**\n * Creates an enviroment with a skybox and Grid.\n */\nexport class Enviroment implements IEnviroment {\n    private _scene: BABYLON.Scene;\n\n    private _height: number;\n    private _width: number;\n\n    private _canvas: any;\n    private _maxRadius: number;\n    private _minRadius: number;\n    private _enviormentGrid: IGrid;\n\n\n    constructor(scene: BABYLON.Scene, canvas: any, size: number, maxCameraRadius?: number, minCameraRadius?: number) {\n        this._scene = scene;\n\n        this._height = size;\n        this._width = size;\n        this._canvas = canvas;\n        this._maxRadius = maxCameraRadius ?? 40;\n        this._minRadius = minCameraRadius ?? 10;\n        this._enviormentGrid = new Grid(size,new MoveValidator());\n\n\n    }\n\n\n    //move to grid\n    private _init() {\n        for (let i = 0; i < this._height; i++) {\n            for (let j = 0; j < this._width; j++) {\n                this._addMesh(i, j, 0);\n            }\n        }\n    }\n\n\n    private _addMesh(x: number, y: number, z: number) {\n        let mesh = BABYLON.MeshBuilder.CreateBox(\"box\" + x + \" : \" + y, { size: 1 }, this._scene);\n        mesh.position =\n            new BABYLON.Vector3(-1 * ((this._width / 2) - x), 0, -1 * ((this._height / 2) - y));\n\n        let mat = new BABYLON.StandardMaterial(\"texture\", this._scene);\n\n        if (this._enviormentGrid.getType(x, y) === SlotType.GRASS) {\n            mat.diffuseTexture = new BABYLON.Texture(texture, this._scene);\n            mat.bumpTexture = new BABYLON.Texture(normalTexture, this._scene);\n        } else if (this._enviormentGrid.getType(x, y) === SlotType.SNOW) {\n            mat.diffuseTexture = new BABYLON.Texture(snowTexture, this._scene);\n            mat.bumpTexture = new BABYLON.Texture(snowTextureNormal, this._scene);\n        } else if (this._enviormentGrid.getType(x, y) === SlotType.MUD) {\n            mat.diffuseTexture = new BABYLON.Texture(mudTexture, this._scene);\n            mat.bumpTexture = new BABYLON.Texture(mudTextureNormal, this._scene);\n        } else if (this._enviormentGrid.getType(x, y) === SlotType.WATER) {\n            mat.diffuseTexture = new BABYLON.Texture(waterTexture, this._scene);\n            //mat.bumpTexture = new BABYLON.Texture(snowTextureNormal, this._scene);\n        }\n\n        mesh.material = mat;\n    }\n\n    private _makeSkyBox(scene: BABYLON.Scene): void {\n        var skybox = BABYLON.MeshBuilder.CreateBox('skybox', { size: 100 }, this._scene);\n        var skyboxmat = new BABYLON.StandardMaterial('skybox', this._scene);\n        skyboxmat.backFaceCulling = false;\n        skyboxmat.reflectionTexture = new BABYLON.CubeTexture('', this._scene, ['_bk.png', '_dn.png', '_ft.png', '_lf.png', '_rt.png', '_up.png'], false, [skybox1, skybox2, skybox3, skybox4, skybox5, skybox6]);\n        skyboxmat.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxmat.specularColor = new BABYLON.Color3(0, 0, 0);\n        skybox.material = skyboxmat;\n        \n\n    }\n\n    public init() {\n\n        this._enviormentGrid.init();\n        this._init();\n        var camera =\n            new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, BABYLON.Vector3.Zero(), this._scene);\n\n        const light = new BABYLON.HemisphericLight(\"Light1\", new BABYLON.Vector3(1, 1, 0), this._scene);\n        this._makeSkyBox(this._scene);\n\n        camera.upperBetaLimit = Math.PI / 2.2;\n        camera.lowerBetaLimit = 0;\n        camera.lowerRadiusLimit = this._minRadius;\n        camera.upperRadiusLimit = this._maxRadius;\n\n\n        camera.attachControl(this._canvas, true);\n    }\n}\n\n","import { BabylonFileLoaderConfiguration, Engine, PickingInfo, PointerInfo, Scene, Vector3 } from '@babylonjs/core';\nimport * as GUI from 'babylonjs-gui';\nimport * as BABYLON from '@babylonjs/core';\nimport pic from '../../assets/sprites/warrior.png';\nimport pic2 from '../../assets/sprites/rogue.png';\nimport pic3 from '../../assets/sprites/cleric.png';\n\nimport { Enviroment } from './enviroment';\nimport { IEnviroment } from './IEnviroment';\nimport { GridSize } from '../constants';\nimport { XmlLoader } from 'babylonjs-gui/2D/xmlLoader';\n\n\n\n\n\nexport class Driver {\n    private _scene: Scene;\n    private _engine: Engine;\n    private _cancas: any;\n    private _lastpicked: any;\n    private _moves: BABYLON.Mesh[][];\n\n\n    constructor(canvas: any) {\n        this._cancas = canvas;\n        this._engine = new Engine(canvas);\n        this._scene = new Scene(this._engine);\n        this._moves = [];\n\n        this._scene.onPointerObservable.add((info: PointerInfo) => {\n          \n            if (info.type === BABYLON.PointerEventTypes.POINTERDOWN) {\n                let otherPicked = this._scene.pick(this._scene.pointerX, this._scene.pointerY);\n\n                if (otherPicked?.pickedMesh?.name === 'mesh') {\n                    \n                    console.log(otherPicked?.pickedMesh.position);\n                    this._lastpicked.pickedSprite.position.set(otherPicked.pickedMesh.position.x, otherPicked.pickedMesh.position.y, otherPicked.pickedMesh.position.z);\n                    for(let i = 0; i < 5; i++){\n                        for (let j = 0; j < 5; j++){\n                            this._moves[i][j].dispose(true);\n                        }\n                    }\n                    return;\n                }\n                let picked = this._scene.pickSprite(this._scene.pointerX, this._scene.pointerY);\n                if (picked != null && picked.hit) {\n                    if (picked.pickedSprite != null) {\n                     \n                        this._lastpicked = picked;\n                        this.displayValidMoves(picked);\n\n\n                    }\n                }\n            }\n\n        })\n    }\n\n    private displayValidMoves(pickedSprite: PickingInfo): void {\n        if (pickedSprite.pickedSprite != null) {\n\n\n            for (let i = 0; i < 5; i++) {\n                this._moves[i] = [];\n                for (let j = 0; j < 5; j++) {\n                    let mesh = BABYLON.MeshBuilder.CreateBox(\"mesh\", { size: 1 }, this._scene);\n                    mesh.position = new Vector3(-1 * (Math.floor((5 / 2)) - pickedSprite.pickedSprite.position.x) + i, 1, -1 * (Math.floor((5 / 2)) - pickedSprite.pickedSprite.position.z)+j);\n                    mesh.isPickable = true;\n                    let mat = new BABYLON.StandardMaterial(\"mats\", this._scene);\n                    mat.alpha = 0.5;\n                    mat.diffuseColor = new BABYLON.Color3(0, 0, 255);\n\n                    mesh.material = mat;\n                    this._moves[i][j] = mesh;\n                }\n            }\n            /*\n             get valid moves \n            */\n\n        }\n    }\n\n    show() {\n\n\n\n        let enviro: IEnviroment = new Enviroment(this._scene, this._cancas, GridSize.LARGE);\n        enviro.init();\n        let testGUI = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"myUI\", true, this._scene);\n        // let button =  GUI.Button.CreateSimpleButton(\"mybutton\", \"button\");\n        // button.width = 0.15;\n        // button.height = 0.15;\n        // button.cornerRadius = 9;\n        // button.background = \"blue\";\n        // button.topInPixels = -200;\n        // testGUI.addControl(button);\n\n\n\n\n        let sprite = new BABYLON.SpriteManager(\"playerSprite\", pic, 1, { width: 32, height: 32 }, this._scene);\n        // let sprite2 = new BABYLON.SpriteManager(\"rouge\", pic2, 1, { width: 32, height: 32 }, this._scene);\n        // let sprite3 = new BABYLON.SpriteManager(\"cleric\", pic3, 1, { width: 32, height: 32 }, this._scene);\n        sprite.isPickable = true;\n        // sprite2.isPickable = true;\n        // sprite3.isPickable = true;\n\n\n        let p = new BABYLON.Sprite(\"player\", sprite);\n        p.isPickable = true;\n\n\n\n        // let p2 = new BABYLON.Sprite(\"rougesprite\", sprite2);\n        // let p3 = new BABYLON.Sprite(\"rouges\", sprite3);\n        // p2.isPickable = true;\n        // p3.isPickable = true;\n\n        p.playAnimation(21, 30, true, 120);\n        // p2.playAnimation(21, 30, true, 120);\n        // p3.playAnimation(21, 30, true, 120);\n\n        p.position = new BABYLON.Vector3(2, 1, 0);\n        // p2.position = new BABYLON.Vector3(1, 1, 0);\n        // p3.position = new BABYLON.Vector3(3, 1, 0);\n\n\n\n        this._engine.runRenderLoop(() => {\n            this._scene.render();\n\n\n            // console.log(s);\n\n        });\n\n        window.addEventListener('resize', () => {\n            this._engine.resize();\n            console.log(\"window resized\")\n        });\n\n    }\n}\n\n\n","import React from 'react';\nimport '../components/Host.css';\nimport { Driver } from '../core/util/basescene';\n\nexport default class Host extends React.Component<{}, {}>{\n\n    private _canvasRef: any;\n    \n\n    constructor(props: any) {\n        super(props);\n        this._canvasRef = React.createRef();\n    }\n\n    async componentDidMount() {\n\n        let d: Driver = new Driver(this._canvasRef);\n        d.show();\n\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <canvas id=\"game-host\" ref={canvasRef => { this._canvasRef = canvasRef }} >\n                </canvas>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Host from './components/Host';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Host></Host>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}